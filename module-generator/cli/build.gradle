/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    // kapt annotation processor plugin, for picocli/graal annotations
    id 'org.jetbrains.kotlin.kapt' version '1.3.72'
    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id 'com.palantir.graal' version '0.7.1'
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "com.diffplug.gradle.spotless" version "4.3.0"
}

ext {
    slf4j_version = "1.7.30"
}

repositories {
    // Use jcenter for resolving dependencies.
    jcenter()
}

group = "io.ia.sdk.tools.module.gen"
version = "0.0.1-SNAPSHOT"

final String mainApplicationClass = "io.ia.sdk.tools.module.cli.ModuleGeneratorCli"

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation "io.ia.sdk.tools.module.gen:core"
    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'info.picocli:picocli:4.3.2'
    implementation "org.slf4j:slf4j-simple:${slf4j_version}"

    // kapt used for annotation processing when creating the native image
    kapt 'info.picocli:picocli-codegen:4.3.2'

    compileOnly "org.slf4j:slf4j-api:${slf4j_version}"

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
}

final String JVM_TARGET = "11"

compileKotlin {
    kotlinOptions {
        jvmTarget = JVM_TARGET
        // will retain parameter names for java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JVM_TARGET
        javaParameters = true
    }
}

application {
    // Define the main class for the application.
    mainClassName = mainApplicationClass
}

spotless {
    kotlin {
        // optionally takes a version
        ktlint()
        // Optional user arguments can be set as such:
        //  ktlint().userData(['indent_size': '4', 'continuation_indent_size' : '8'])
    }
}


String reflectionConfigFile =
        "${buildDir}/resources/main/META-INF/native-image/${project.group}/${project.name}/reflect-config.json"
String resourceConfigFile = "src/main/resources/resource-config.json"

final String binaryName = "ignition-module-gen"

graal {
    javaVersion JVM_TARGET
    graalVersion "20.1.0"
    mainClass mainApplicationClass
    outputName binaryName
    windowsVsVersion "2019"

    /*
     * Each option must be its own line-item, all will get added to the final options command args passed to the
     * substrate VM compiler
     */

    // tell graal/substrate to load resources that need to resolve via `Classloader.getSystemResource` style resolution
    // we define the patterns we want to support in the config json file found below, in accordance with
    // https://github.com/oracle/graal/blob/master/substratevm/OPTIONS.md
    option "-H:ResourceConfigurationFiles=$resourceConfigFile"

    // don't fallback to 'jre-required' image if the full native image assembly fails
    option  "--no-fallback"

    // we don't need this because we generate these dynamically at build-time
    // option "-H:ReflectionConfigurationFiles=$reflectionConfigFile"
}

nativeImage {
    dependsOn(build)
}

wrapper {
    gradleVersion "6.5"
    distributionType  org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL
}

task runNative(type: Exec) {
    workingDir "$buildDir/graal"
    commandLine binaryName
    dependsOn(nativeImage)
}
