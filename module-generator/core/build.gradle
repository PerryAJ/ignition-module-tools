
plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "com.diffplug.gradle.spotless" version "4.3.0"
}

ext {
    slf4j_version = "1.7.30"
}

version = "0.0.1-SNAPSHOT"
group = "io.ia.sdk.tools.module.gen"

repositories {
    // Use jcenter for resolving dependencies.
    jcenter()
}

java {
    withJavadocJar()
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

compileKotlin {
    kotlinOptions{
        jvmTarget = '11'
        // will retain parameter names for java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions{
        jvmTarget = '11'
        javaParameters = true
    }
}


dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // Use SLF4J api for logging, logger implementation to be provided by lib consumer
    api "org.slf4j:slf4j-api:${slf4j_version}"

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    // support logging in tests
    testImplementation "org.slf4j:slf4j-api:${slf4j_version}"
    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
}


spotless {
    kotlin {
        // optionally takes a version
        ktlint()
        targetExclude "src/main/resources/templates/buildscript/*.build.gradle.kts",
                "src/main/resources/templates/settings.gradle.kts",
                "src/main/resources/templates/hook/*.kt"
    }
}


// Artifact publishing configuration
publishing {
    publications {
        ignitionModuleGenerator(MavenPublication) {
            from components.java
            version = project.version
            groupId = project.group
            artifactId = "$project.name"
        }
    }

    String PUBLISHING_KEY = "ignitionModuleGen.maven.repo.${version.endsWith('-SNAPSHOT') ? 'snapshot': 'release' }"

    repositories {
        maven {
            name = loadProperty("${PUBLISHING_KEY}.name")
            url = loadProperty("${PUBLISHING_KEY}.url")

            credentials {
                username = loadProperty("${PUBLISHING_KEY}.username")
                password = loadProperty("${PUBLISHING_KEY}.password")
            }
        }
    }
}


/**
 * Loads a property from the environment, first looking for System property, then checking for a runtime gradle prop,
 * and finally falling back to checking a property file as the last resort.
 *
 * @param propertyKey environmental or gradle project property key to load value for
 * @return value of property, as a String
 */
String loadProperty(String propertyKey) {
    // by default, will look for this file in the user's home directory
    final String propertyFileName = "publishing.properties"
    final File propertyFile = new File(System.getProperty("user.home"), propertyFileName)

    String value = System.getProperty(propertyKey, null)

    if (value == null) {
        logger.info("Did not find property '$value' as System property, searching in gradle properties...")

        if (project.properties.containsKey(propertyKey)) {
            value = project.properties.get(propertyKey)
            // no value found in project properties, look for property file
        } else if (propertyFile.exists()) {
            logger.debug("${propertyFile.absolutePath} exists.")

            if (!project.ext.has("loaded_file_props") && propertyFile.exists()) {
                Properties fileProps = new Properties()
                propertyFile.withInputStream {
                    fileProps.load(it)
                }

                project.ext.setProperty("loaded_file_props", fileProps)
            }

            if (project.ext.loaded_file_props.get(propertyKey) != null) {
                value = fileProps.get(propertyKey, value)
            }
        }
    }

    logger.debug("Resolved property: ${propertyKey}=${value}")

    return value
}


wrapper {
    gradleVersion "6.5"
    distributionType Wrapper.DistributionType.ALL
}
