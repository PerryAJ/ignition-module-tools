
plugins {
    id "java-gradle-plugin"
    id "com.gradle.plugin-publish" version "0.12.0"
    id "org.jetbrains.kotlin.jvm"
    // kapt annotation processor plugin, for picocli/graal annotations
    id 'org.jetbrains.kotlin.kapt'
    id "maven-publish"
    id "com.diffplug.spotless"
}

ext {
    slf4j_version = "1.7.30"
}

repositories {
    jcenter()
    maven {
        url 'https://nexus.inductiveautomation.com/repository/public'
    }
}

group = "io.ia.sdk"

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    // Use the Kotlin JDK standard library.
    implementation('org.jetbrains.kotlin:kotlin-stdlib')
    implementation('org.jetbrains.kotlin:kotlin-reflect')
    implementation("org.redundent:kotlin-xml-builder:1.6.0")
    implementation("com.squareup.moshi:moshi-kotlin:1.9.3")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:1.9.3")

    api('com.inductiveautomation.ignitionsdk:module-signer:0.0.1.ia')

    // Use the Kotlin test library.
    testImplementation('org.jetbrains.kotlin:kotlin-test')
    // Use the Kotlin JUnit integration.
    testImplementation('org.jetbrains.kotlin:kotlin-test-junit')
    testImplementation(project(":generator-core"))
}

gradlePlugin {
    plugins {
        modl {
            id = "io.ia.sdk.modl"
            implementationClass = "io.ia.sdk.gradle.modl.IgnitionModlPlugin"
        }
    }
}

pluginBundle {
    website = "https://www.github.com/inductiveautomation/ignition-module-tools"
    vcsUrl = "https://github.com/inductiveautomation/ignition-module-tools"
    description = "Create Modules to add capabilities to Inductive Automation's Ignition platform."
    plugins{
        modl {
            displayName = "Ignition Module Builder Plugin"
            tags = ["inductiveautomation", "inductive automation", "ignition", "module", "modl", "maker", "iiot"]
            version = project.version
        }
    }

    mavenCoordinates {
        // coordinates are automatically established as `gradle.plugin.${project.group}` when publishing to
        // gradle plugin portal, so no need to set this here.
        // groupId = project.getGroup()
        artifactId = "gradle-module-plugin"
        version = project.version
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

compileKotlin {
    kotlinOptions{
        jvmTarget = '11'
        // will retain parameter names for java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions{
        jvmTarget = '11'
        javaParameters = true
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
        compileClasspath += sourceSets.main.output
        compileClasspath += configurations.testRuntimeClasspath
        compileClasspath += configurations.runtimeClasspath
        runtimeClasspath += sourceSets.main.output
    }
}

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

check.dependsOn(tasks.functionalTest)
test.dependsOn(tasks.functionalTest)

spotless {
    kotlin {
        ktlint("0.39.0").userData(['max_line_length': "120"])
    }
}
